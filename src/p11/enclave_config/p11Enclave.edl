/*
 * Copyright (C) 2019-2020 Intel Corporation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in
 *      the documentation and/or other materials provided with the
 *      distribution.
 *   3. Neither the name of Intel Corporation nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave
{
    // For Linux builds..
    from "sgx_tsgxssl.edl" import *; /* Libraries for OpenSSL use in the enclave */
    from "sgx_tstdc.edl" import *; /* Libraries for OpenSSL use in the enclave */
    from "sgx_tprotected_fs.edl" import *;

    include "cryptoki.h"

    include "sgx_key.h"
    include "sgx_key_exchange.h"
    include "config.h"

    trusted
    {
        /* define ECALLs here. */
        // enclave init and deinit functions

        //////////////////////////

        public CK_RV sgx_C_Initialize([isptr, user_check] CK_VOID_PTR pInitArgs);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_Finalize([isptr, user_check] CK_VOID_PTR pReserved);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetInfo([isptr, user_check] CK_INFO_PTR pInfo);

        //---------------------------------------------------------------------------------------------
        // C_GetFunctionList is handled in the upper layer - so this is not exposed/implemented in the enclave
        // PKCS_API public CK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetSlotList(CK_BBOOL                           tokenPresent,
                                       [isptr, user_check] CK_SLOT_ID_PTR pSlotList,
                                       [isptr, user_check] CK_ULONG_PTR   pulCount);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetSlotInfo(CK_SLOT_ID                           slotID,
                                       [isptr, user_check] CK_SLOT_INFO_PTR pInfo);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_EncryptInit(CK_SESSION_HANDLE                    hSession,
                                       [isptr, user_check] CK_MECHANISM_PTR pMechanism,
                                       CK_OBJECT_HANDLE                     hKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_EncryptUpdate(CK_SESSION_HANDLE                hSession,
                                         [isptr, user_check] CK_BYTE_PTR  pData,
                                         CK_ULONG                         ulDataLen,
                                         [isptr, user_check] CK_BYTE_PTR  pEncryptedData,
                                         [isptr, user_check] CK_ULONG_PTR pulEncryptedDataLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_Encrypt(CK_SESSION_HANDLE                hSession,
                                   [isptr, user_check] CK_BYTE_PTR  pData,
                                   CK_ULONG                         ulDataLen,
                                   [isptr, user_check] CK_BYTE_PTR  pEncryptedData,
                                   [isptr, user_check] CK_ULONG_PTR pulEncryptedDataLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_EncryptFinal(CK_SESSION_HANDLE                hSession,
                                        [isptr, user_check] CK_BYTE_PTR  pEncryptedData,
                                        [isptr, user_check] CK_ULONG_PTR pulEncryptedDataLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DecryptInit(CK_SESSION_HANDLE                    hSession,
                                       [isptr, user_check] CK_MECHANISM_PTR pMechanism,
                                       CK_OBJECT_HANDLE                     hKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_Decrypt(CK_SESSION_HANDLE                hSession,
                                   [isptr, user_check] CK_BYTE_PTR  pEncryptedData,
                                   CK_ULONG                         ulEncryptedDataLen,
                                   [isptr, user_check] CK_BYTE_PTR  pData,
                                   [isptr, user_check] CK_ULONG_PTR pulDataLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DecryptUpdate(CK_SESSION_HANDLE                hSession,
                                         [isptr, user_check] CK_BYTE_PTR  pEncryptedData,
                                         CK_ULONG                         ulEncryptedDataLen,
                                         [isptr, user_check] CK_BYTE_PTR  pData,
                                         [isptr, user_check] CK_ULONG_PTR pDataLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DecryptFinal(CK_SESSION_HANDLE                hSession,
                                        [isptr, user_check] CK_BYTE_PTR  pData,
                                        [isptr, user_check] CK_ULONG_PTR pDataLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DigestInit(CK_SESSION_HANDLE                    hSession,
                                      [isptr, user_check] CK_MECHANISM_PTR pMechanism);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_Digest(CK_SESSION_HANDLE                hSession,
                                  [isptr, user_check] CK_BYTE_PTR  pData,
                                  CK_ULONG                         ulDataLen,
                                  [isptr, user_check] CK_BYTE_PTR  pDigest,
                                  [isptr, user_check] CK_ULONG_PTR pulDigestLen);


        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DigestUpdate(CK_SESSION_HANDLE               hSession,
                                        [isptr, user_check] CK_BYTE_PTR pPart,
                                        CK_ULONG                        ulPartLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DigestFinal(CK_SESSION_HANDLE                hSession,
                                       [isptr, user_check] CK_BYTE_PTR  pDigest,
                                       [isptr, user_check] CK_ULONG_PTR pulDigestLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SignInit(CK_SESSION_HANDLE                    hSession,
                                    [isptr, user_check] CK_MECHANISM_PTR pMechanism,
                                    CK_OBJECT_HANDLE                     hKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_Sign(CK_SESSION_HANDLE                hSession,
                                [isptr, user_check] CK_BYTE_PTR  pData,
                                CK_ULONG                         ulDataLen,
                                [isptr, user_check] CK_BYTE_PTR  pSignature,
                                [isptr, user_check] CK_ULONG_PTR pulSignatureLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_VerifyInit(CK_SESSION_HANDLE                    hSession,
                                      [isptr, user_check] CK_MECHANISM_PTR pMechanism,
                                      CK_OBJECT_HANDLE                     hKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_Verify(CK_SESSION_HANDLE               hSession,
                                  [isptr, user_check] CK_BYTE_PTR pData,
                                  CK_ULONG                        ulDataLen,
                                  [isptr, user_check] CK_BYTE_PTR pSignature,
                                  CK_ULONG                        ulSignatureLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GenerateKey(CK_SESSION_HANDLE                        hSession,
                                       [isptr, user_check] CK_MECHANISM_PTR     pMechanism,
                                       [isptr, user_check] CK_ATTRIBUTE_PTR     pTemplate,
                                       CK_ULONG                                 ulCount,
                                       [isptr, user_check] CK_OBJECT_HANDLE_PTR phKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GenerateKeyPair(CK_SESSION_HANDLE                        hSession,
                                           [isptr, user_check] CK_MECHANISM_PTR     pMechanism,
                                           [isptr, user_check] CK_ATTRIBUTE_PTR     pPublicKeyTemplate,
                                           CK_ULONG                                 ulPublicKeyAttributeCount,
                                           [isptr, user_check] CK_ATTRIBUTE_PTR     pPrivateKeyTemplate,
                                           CK_ULONG                                 ulPrivateKeyAttributeCount,
                                           [isptr, user_check] CK_OBJECT_HANDLE_PTR phPublicKey,
                                           [isptr, user_check] CK_OBJECT_HANDLE_PTR phPrivateKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_WrapKey(CK_SESSION_HANDLE                    hSession,
                                   [isptr, user_check] CK_MECHANISM_PTR pMechanism,
                                   CK_OBJECT_HANDLE                     hWrappingKey,
                                   CK_OBJECT_HANDLE                     hKey,
                                   [isptr, user_check] CK_BYTE_PTR      pWrappedKey,
                                   [isptr, user_check] CK_ULONG_PTR     pulWrappedKeyLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_UnwrapKey(CK_SESSION_HANDLE                        hSession,
                                     [isptr, user_check] CK_MECHANISM_PTR     pMechanism,
                                     CK_OBJECT_HANDLE                         hUnwrappingKey,
                                     [isptr, user_check] CK_BYTE_PTR          pWrappedKey,
                                     CK_ULONG                                 ulWrappedKeyLen,
                                     [isptr, user_check] CK_ATTRIBUTE_PTR     pTemplate,
                                     CK_ULONG                                 ulCount,
                                     [isptr, user_check] CK_OBJECT_HANDLE_PTR hKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetTokenInfo(CK_SLOT_ID                            slotID,
                                        [isptr, user_check] CK_TOKEN_INFO_PTR pInfo);

#if 0 // Unsupported by Crypto API Toolkit
        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_WaitForSlotEvent(CK_FLAGS                           flags,
                                            [isptr, user_check] CK_SLOT_ID_PTR pSlot,
                                            [isptr, user_check] CK_VOID_PTR    pReserved);
#endif // Unsupported by Crypto API Toolkit

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetMechanismInfo(CK_SLOT_ID                                slotID,
                                            CK_MECHANISM_TYPE                         type,
                                            [isptr, user_check] CK_MECHANISM_INFO_PTR pInfo);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetMechanismList(CK_SLOT_ID                                slotID,
                                            [isptr, user_check] CK_MECHANISM_TYPE_PTR pMechanismList,
                                            [isptr, user_check] CK_ULONG_PTR          pulCount);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_InitToken(CK_SLOT_ID                          slotID,
                                     [isptr, user_check] CK_UTF8CHAR_PTR pPin,
                                     CK_ULONG                            ulPinLen,
                                     [isptr, user_check] CK_UTF8CHAR_PTR pLabel);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_InitPIN(CK_SESSION_HANDLE                   hSession,
                                   [isptr, user_check] CK_UTF8CHAR_PTR pPin,
                                   CK_ULONG                            ulPinLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SetPIN(CK_SESSION_HANDLE                   hSession,
                                  [isptr, user_check] CK_UTF8CHAR_PTR pOldPin,
                                  CK_ULONG                            ulOldLen,
                                  [isptr, user_check] CK_UTF8CHAR_PTR pNewPin,
                                  CK_ULONG                            ulNewLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_OpenSession(CK_SLOT_ID                                slotID,
                                       CK_FLAGS                                  flags,
                                       [isptr, user_check] CK_VOID_PTR           pApplication,
                                       [isptr, user_check] CK_NOTIFY             notify,
                                       [isptr, user_check] CK_SESSION_HANDLE_PTR phSession);

        //---------------------------------------------------------------------------------------------
        public CK_RV  sgx_C_CloseSession(CK_SESSION_HANDLE hSession);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_CloseAllSessions(CK_SLOT_ID slotID);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetSessionInfo(CK_SESSION_HANDLE                       hSession,
                                          [isptr, user_check] CK_SESSION_INFO_PTR pInfo);

#if 0 // Unsupported by Crypto API Toolkit
        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetOperationState(CK_SESSION_HANDLE                hSession,
                                             [isptr, user_check] CK_BYTE_PTR  pOperationState,
                                             [isptr, user_check] CK_ULONG_PTR pulOperationStateLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SetOperationState(CK_SESSION_HANDLE               hSession,
                                             [isptr, user_check] CK_BYTE_PTR pOperationState,
                                             CK_ULONG                        ulOperationStateLen,
                                             CK_OBJECT_HANDLE                hEncryptionKey,
                                             CK_OBJECT_HANDLE                hAuthenticationKey);
#endif // Unsupported by Crypto API Toolkit

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_Login(CK_SESSION_HANDLE                   hSession,
                                 CK_USER_TYPE                        userType,
                                 [isptr, user_check] CK_UTF8CHAR_PTR pPin,
                                 CK_ULONG                            ulPinLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_Logout(CK_SESSION_HANDLE hSession);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_CreateObject(CK_SESSION_HANDLE                        hSession,
                                        [isptr, user_check] CK_ATTRIBUTE_PTR     pTemplate,
                                        CK_ULONG                                 ulCount,
                                        [isptr, user_check] CK_OBJECT_HANDLE_PTR phObject);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_CopyObject(CK_SESSION_HANDLE                        hSession,
                                      CK_OBJECT_HANDLE                         hObject,
                                      [isptr, user_check] CK_ATTRIBUTE_PTR     pTemplate,
                                      CK_ULONG                                 ulCount,
                                      [isptr, user_check] CK_OBJECT_HANDLE_PTR phNewObject);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetObjectSize(CK_SESSION_HANDLE                hSession,
                                         CK_OBJECT_HANDLE                 hObject,
                                         [isptr, user_check] CK_ULONG_PTR pulSize);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetAttributeValue(CK_SESSION_HANDLE                    hSession,
                                             CK_OBJECT_HANDLE                     hObject,
                                             [isptr, user_check] CK_ATTRIBUTE_PTR pTemplate,
                                             CK_ULONG                             ulCount);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SetAttributeValue(CK_SESSION_HANDLE                    hSession,
                                             CK_OBJECT_HANDLE                     hObject,
                                             [isptr, user_check] CK_ATTRIBUTE_PTR pTemplate,
                                             CK_ULONG                             ulCount);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_FindObjectsInit(CK_SESSION_HANDLE                    hSession,
                                           [isptr, user_check] CK_ATTRIBUTE_PTR pTemplate,
                                           CK_ULONG                             ulCount);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_FindObjects(CK_SESSION_HANDLE                        hSession,
                                       [isptr, user_check] CK_OBJECT_HANDLE_PTR phObject,
                                       CK_ULONG                                 ulMaxObjectCount,
                                       [isptr, user_check] CK_ULONG_PTR         pulObjectCount);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_FindObjectsFinal(CK_SESSION_HANDLE hSession);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DestroyObject(CK_SESSION_HANDLE hSession,
                                         CK_OBJECT_HANDLE  hKey);

#if 0 // Unsupported by Crypto API Toolkit
        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GetFunctionStatus(CK_SESSION_HANDLE hSession);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DigestKey(CK_SESSION_HANDLE  hSession,
                                     CK_OBJECT_HANDLE   hKey);
#endif // Unsupported by Crypto API Toolkit

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SignUpdate(CK_SESSION_HANDLE               hSession,
                                      [isptr, user_check] CK_BYTE_PTR pPart,
                                      CK_ULONG                        ulPartLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SignFinal(CK_SESSION_HANDLE                hSession,
                                     [isptr, user_check] CK_BYTE_PTR  pSignature,
                                     [isptr, user_check] CK_ULONG_PTR pulSignatureLen);

#if 0 // Unsupported by Crypto API Toolkit
        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SignRecoverInit(CK_SESSION_HANDLE                    hSession,
                                           [isptr, user_check] CK_MECHANISM_PTR pMechanism,
                                           CK_OBJECT_HANDLE                     hKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SignRecover(CK_SESSION_HANDLE                hSession,
                                       [isptr, user_check] CK_BYTE_PTR  pData,
                                       CK_ULONG                         ulDataLen,
                                       [isptr, user_check] CK_BYTE_PTR  pSignature,
                                       [isptr, user_check] CK_ULONG_PTR pulSignatureLen);
#endif // Unsupported by Crypto API Toolkit

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_VerifyUpdate(CK_SESSION_HANDLE               hSession,
                                        [isptr, user_check] CK_BYTE_PTR pPart,
                                        CK_ULONG                        ulPartLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_VerifyFinal(CK_SESSION_HANDLE               hSession,
                                       [isptr, user_check] CK_BYTE_PTR pSignature,
                                       CK_ULONG                        ulSignatureLen);

#if 0 // Unsupported by Crypto API Toolkit
        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_VerifyRecoverInit(CK_SESSION_HANDLE                    hSession,
                                             [isptr, user_check] CK_MECHANISM_PTR pMechanism,
                                             CK_OBJECT_HANDLE                     hKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_VerifyRecover(CK_SESSION_HANDLE                hSession,
                                         [isptr, user_check] CK_BYTE_PTR  pSignature,
                                         CK_ULONG                         ulSignatureLen,
                                         [isptr, user_check] CK_BYTE_PTR  pData,
                                         [isptr, user_check] CK_ULONG_PTR pulDataLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DigestEncryptUpdate(CK_SESSION_HANDLE                hSession,
                                               [isptr, user_check] CK_BYTE_PTR  pPart,
                                               CK_ULONG                         ulPartLen,
                                               [isptr, user_check] CK_BYTE_PTR  pEncryptedPart,
                                               [isptr, user_check] CK_ULONG_PTR pulEncryptedPartLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DecryptDigestUpdate(CK_SESSION_HANDLE                hSession,
                                               [isptr, user_check] CK_BYTE_PTR  pEncryptedPart,
                                               CK_ULONG                         ulEncryptedPartLen,
                                               [isptr, user_check] CK_BYTE_PTR  pPart,
                                               [isptr, user_check] CK_ULONG_PTR pulPartLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SignEncryptUpdate(CK_SESSION_HANDLE                hSession,
                                             [isptr, user_check] CK_BYTE_PTR  pPart,
                                             CK_ULONG                         ulPartLen,
                                             [isptr, user_check] CK_BYTE_PTR  pEncryptedPart,
                                             [isptr, user_check] CK_ULONG_PTR pulEncryptedPartLen);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DecryptVerifyUpdate(CK_SESSION_HANDLE                hSession,
                                               [isptr, user_check] CK_BYTE_PTR  pEncryptedPart,
                                               CK_ULONG                         ulEncryptedPartLen,
                                               [isptr, user_check] CK_BYTE_PTR  pPart,
                                               [isptr, user_check] CK_ULONG_PTR pulPartLen);


        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_DeriveKey(CK_SESSION_HANDLE                        hSession,
                                     [isptr, user_check] CK_MECHANISM_PTR     pMechanism,
                                     CK_OBJECT_HANDLE                         hBaseKey,
                                     [isptr, user_check] CK_ATTRIBUTE_PTR     pTemplate,
                                     CK_ULONG                                 ulAttributeCount,
                                     [isptr, user_check] CK_OBJECT_HANDLE_PTR phKey);

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_SeedRandom(CK_SESSION_HANDLE               hSession,
                                      [isptr, user_check] CK_BYTE_PTR pSeed,
                                      CK_ULONG                        ulSeedLen);
#endif // Unsupported by Crypto API Toolkit

        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_GenerateRandom(CK_SESSION_HANDLE               hSession,
                                          [isptr, user_check] CK_BYTE_PTR pRandomData,
                                          CK_ULONG                        ulRandomLen);

#if 0 // Unsupported by Crypto API Toolkit
        //---------------------------------------------------------------------------------------------
        public CK_RV sgx_C_CancelFunction(CK_SESSION_HANDLE hSession);
#endif // Unsupported by Crypto API Toolkit

    };

    untrusted
    {
        uint8_t ocall_mkdir([in, string] const char* path);

        uint8_t ocall_rmdir([in, string] const char* path);

        size_t ocall_refresh([in, string] const char* path,
                             [in, out, size = subDirsSize] char* subDirsBuffer, uint32_t subDirsSize, [out] uint32_t* subDirsBufferSize,
                             [in, out, size = filesSize]   char* filesBuffer,   uint32_t filesSize,   [out] uint32_t* filesBufferSize);

        size_t ocall_generate_quote([in] sgx_report_t*    enclaveReport,
                                    [user_check] uint8_t* quoteBuffer,
                                    uint32_t              quoteBufferLength);
    };
};
